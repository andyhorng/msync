// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var BitArray, CBuffer, Matrix, a, b,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BitArray = require('bit-array');

  CBuffer = require('CBuffer');

  Matrix = (function() {
    function Matrix(height, width) {
      this.height = height != null ? height : 10;
      this.width = width != null ? width : 10;
      this.toString = __bind(this.toString, this);
      this.toJSON = __bind(this.toJSON, this);
      this.apply = __bind(this.apply, this);
      this.diff = __bind(this.diff, this);
      this.push = __bind(this.push, this);
      this.get = __bind(this.get, this);
      this.set = __bind(this.set, this);
      this.buffer = new CBuffer(this.height);
      this.buffer.fill((function(_this) {
        return function() {
          return new BitArray(_this.width);
        };
      })(this));
    }

    Matrix.prototype.set = function(x, y, z) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 1;
      }
      return this.buffer.get(x).set(y, z);
    };

    Matrix.prototype.get = function(x, y) {
      if (x == null) {
        x = 0;
      }
      if (y != null) {
        return this.buffer.get(x).get(y);
      } else {
        return this.buffer.get(x);
      }
    };

    Matrix.prototype.push = function(row) {
      if (row == null) {
        row = new BitArray(this.width);
      }
      return this.buffer.push(row);
    };

    Matrix.prototype.diff = function(matrix) {
      var result;
      if (matrix == null) {
        return null;
      }
      if (!((matrix.height === this.height) && (matrix.width === this.width))) {
        return null;
      }
      result = [];
      this.buffer.forEach((function(_this) {
        return function(row, x) {
          var diff, target, y, _i, _ref, _results;
          target = matrix.get(x);
          diff = row.copy().xor(target);
          _results = [];
          for (y = _i = 0, _ref = diff.size(); 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
            if (diff.get(y)) {
              _results.push(result.push([x, y]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      return result;
    };

    Matrix.prototype.apply = function(diff) {
      if (diff == null) {
        diff = [];
      }
      return diff.forEach(function(_arg) {
        var x, y;
        x = _arg[0], y = _arg[1];
        return this.buffer.get(x).set(y, 1);
      });
    };

    Matrix.prototype.toJSON = function() {
      var result;
      result = [];
      this.buffer.forEach((function(_this) {
        return function(row) {
          return result.push(row.toJSON());
        };
      })(this));
      return result;
    };

    Matrix.prototype.toString = function() {
      var result;
      result = [];
      this.buffer.forEach((function(_this) {
        return function(row) {
          return result.push(row.toString());
        };
      })(this));
      return result;
    };

    return Matrix;

  })();

  module.exports = Matrix;

  a = new Matrix();

  b = new Matrix();

  a.set(2, 1, 1);

  a.set(1, 4, 1);

  b.set(3, 1, 1);

  b.set(2, 1, 1);

  b.set(1, 1, 1);

  console.log(a.diff(b));

}).call(this);
